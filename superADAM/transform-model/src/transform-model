#!/usr/bin/env M2 --script

load (getenv("ADAM_ROOT")|"superADAM/share/ADAM.m2")

helpString = ///usage: transform-model <json-task-file >json-output-model
///

if #scriptCommandLine > 1 then (
    stderr << helpString;
    exit(1);
    )

--------------------------------

T = parseJSON get stdio -- task json object
add = T#"task"#"method"#"arguments"#0
type = T#"task"#"method"#"arguments"#1
M = modelFromJSONHashTable T#"task"#"input"#0
M1 = transformModel(add,type,M) -- returns a model or an error json (which is a HashTable)
print prettyPrintJSON M1

end

restart
load (getenv("ADAM_ROOT")|"superADAM/share/ADAM.m2")
T = parseJSON get "../test/test1.json"
-- now verify that T is a task
result = null
if keys T != {"task"} then (
    result = errorPacket "input was not a task json file";
    print result;
    exit(1);
    );
if set keys T#"task" =!= set{"input", "method"}
then (
    result = errorPacket "expected keys to be 'input' and 'method'";
    print result;
    exit(1);
    )

models = select(readDirectory "../../example-models/cell-collective/", f -> match("\\.json$", f))
-- for each of these: add poly, rm transition table, add transition table, remove poly: should have identical to original (since the originals are all tt)
export filename=../../example-models/cell-collective/Apoptosis_Network.json
run ///cat ../../example-models/cell-collective/Apoptosis_Network.json \\
    | ./make-transform-task add poly \\
    | ./transform-model  \\
    | ./make-transform-task remove tt \\
    | ./transform-model \\
    | ./make-transform-task add tt \\
    | ./transform-model \\
    | ./make-transform-task remove poly \\
    | ./transform-model \\
    | prettify-json >output.json)
///
prettify-json $filename reference-pp.json
-- expect one input, which should be a model
-- expect
-- example:
./transform-model add poly <~/Sites/ADAM/exampleJSON/SecondVersion1-Model.json
./transition2polynomials <~/Sites/ADAM/exampleJSON/SecondVersion1-Model.json
./transition2polynomials <~/Sites/ADAM/exampleJSON/SimplestVersion1-Model.json
./transition2polynomials <~/Sites/ADAM/exampleJSON/ThirdVersion1-Model.json
./transition2polynomials <~/Sites/ADAM/exampleJSON/lac-operon-full-Model.json
./transition2polynomials <~/Sites/ADAM/exampleJSON/lac-operon-reduced-Model.json

-- this one fails...! Because it doesn't have transition functions?
-- need check that input is OK
./transition2polynomials <~/Sites/ADAM/sampleJSON/sampleModel2.json 
./transition2polynomials <~/Sites/ADAM/sampleJSON/sampleModel.json 
cat ~/Sites/ADAM/exampleJSON/lac-operon-reduced-Model.json | ./transition2polynomials

restart
path = prepend(currentDirectory()|"lib/M2code", path)
debug needsPackage "ADAMModel"
needsPackage "JSON"
M = parseModel get "~/Sites/ADAM/sampleJSON/sampleModel2.json"
-- CHECK: has transition tables
M1 = addPolynomials M
print prettyPrintJSON M1

-- need the following filters/translators
1. validate: input: Model, output: ModelOrError
  variations: also give what features it should have?
  2 versions, 1 in M2: takes a Model
              1 in shell: takes a text file
2. computePolynomials: Model --> ModelOrError
  2 versions: 1 for Model.  Computes polynomials from either TT ot logical formulae
              1 for text file
3. computeTransitionTables
4. computeLogicalExpressions
