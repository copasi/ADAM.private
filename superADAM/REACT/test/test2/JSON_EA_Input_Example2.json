{
"task": {
  "input": {
    "reverseEngineeringInputData": {
      "description": "optional place to put comments - data matrices for wildtype and knockout experiments",
      "fieldCardinality": 2,
      "numberVariables": 8,
      "timeSeriesData": [
          {
          "index": [],
          "matrix": [
              [1,0,0,0],
              [0,1,0,1],
              [1,1,0,0]
            ],
          "name": "wildtype experiment 1"
          },
          {
          "index": [],
          "matrix": [
              [1,1,0,0],
              [0,0,0,1],
              [1,0,0,0]
            ],
          "name": "wildtype experiment 2"
          },
          {
          "index": [1],
          "matrix": [
              [0,0,0,0],
              [0,0,0,1],
              [0,1,0,0],
              [0,0,0,1]
            ],
          "name": "knockout experiment 1"
          },
          {
          "index": [3],
          "matrix": [
              [0,1,0,0],
              [0,1,0,1],
              [0,1,0,1],
              [0,0,0,0]
            ],
          "name": "knockout experiment 2"
          },
          {
          "index": [2],
          "matrix": [
              [1,0,0,0],
              [0,0,0,1],
              [1,0,0,1],
              [0,0,0,0]
            ],
          "name": "knockout experiment 3"
          }
        ]
      }
    },
  "method": {
    "id": "REACT",
    "description": "this is the reverse engineering method that uses an evolutionary algorithm as optimization method",
    "parameters": 
{
"priorReverseEngineeringNetwork": [
              [1, 2, 2, 2, 2],
              [0, 1, 0, 1, 1],
              [1, 1, 0, 0, 2],
              [0, 1, 2, 0, 3]
            ],

"complexity": [
              [1,2,2,2],
              [0,1,0,1],
              [1,1,0,0]
            ],

"priorBiologicalNetwork": [
              [1, 0.5, 0.3, 0],
              [0, 1, 0.5, 1], 
              [1, 0, 0, 1],
              [1, 0, 0.7, 1]
            ],

"updateRules": {
      "x1": [
          {
            "inputVariables": ["x1","x2"],
            "polynomialFunction": "x1*x2",
            "score": 1.0
          }
      ],
      "x2": [
          {
            "inputVariables": ["x1"],
            "polynomialFunction": "x1+1",
            "polynomialProbability": 0.25
          },
          {
            "inputVariables": ["x1","x2"],
            "polynomialFunction": "x1*x2",
            "polynomialProbability": 0.75
          }
      ],
      "x3": [
          {
            "inputVariables": ["x1","x2","x3"],
            "polynomialFunction": "x3^2+x1",
            "polynomialProbability": 1.0
          }
      ],
      "x4": [
          {
            "inputVariables": ["x1","x3"],
            "polynomialFunction": "x3^2+x1+x2",
            "polynomialProbability": 1.0
          }
      ]

    },

"EAparams" : {
"basicparams": {
"HammingPolyWeight": 0.5,
"ComplexityWeight":0.2,
"RevEngWeight": 0.2,
"BioProbWeight": 0.1,
"HammingModelWeight": 0.35,
"PolyScoreWeight": 0.65
},

"advancedparams":{ 
"GenePoolSize": 100,
"NumCandidates": 55,
"NumParentsToPreserve": 5,
"MaxGenerations": 100,
"StableGenerationLimit": 50,
"MutateProbability": 0.50
}

}

}
    },
  "type": "reverseEngineering"
  }
}
