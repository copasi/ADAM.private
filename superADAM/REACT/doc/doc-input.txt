*********************************************************************************
* DOCUMENTATION FOR JSON INPUT IN REACT						*
* Written by: Paola Vera-Licona							*
* Date: 10/21/2014								*
*********************************************************************************


JSON format input file: “Task”: to describe the task in hand, we consider three sub-hashtables: “type”, “input” and “method”“type”: this is the type of problem we are addressing. In this case is "reverseEngineering"“input”: here we introduce the general input data that any PDS reverse engineering problem will need, namely: Number of variables, Characteristic of polynomial ring and the list of input time series:•	It starts with one field that allow us to introduce comments regarding the file. The first field is  “description” to describe the file.•	Number of variables indicated as “numberVariables”. This is a non-zero positive integer number.•	The cardinality of the field for the PDSs. This is indicated as “fieldCardinality”. At the moment this has to be a prime number.•	The input time series data indicated as “timeSeriesData”.•	“timeSeriesData” it is organized as an array of time series data. •	Each one of the time series is described as object “matrix”.•	Each one of the “matrix” objects -that describe an experiment-, we specify:o	The actual time series data. This is represented as a matrix were columns represent the variables  and rows are the ordered time steps.o	“Name” which refers to the name designated to that experimento	“index” this used for Knockout data to specify which variable is knocked out. For example if the 3rd variable is knocked out, then we write the as “index”: [3]. Notice that we can have in one experiment more than one variable knocked out . For example, if variables 4 and 5 are knocked out, then we describe such KO experiment as “index”: [4,5]. When we refer to wildtype data, we simply write an empty“index”: [].“method”: here is were we describe the EA•	"id": "REACT"•	"description": "this is the reverse engineering method that uses an evolutionary algorithm as optimization method”,•	"parameters": this is a string of 5 parameters ["param1"," param2"]o	“rev” is a matrix representing the adjacency matrix obtained from a previously applied reverse engineering methodo	“bio” is a matrix representing the adjacency matrix obtained from prior biological knowledge about the systemo	“updateRules” represents a polynomial model that will seed the EA population. To be consistent with the JSON standard format for the reverse engineering module,  it will be represented as an array of hash tables, where each hash table will describe each polynomial functiono	“EAparams” describes the parameters corresponding specifically to the Evolutionary Algorithm process included in REACT. These list of EA parameters are divided in two categories: basic and advanced.  Basic parameters refer to parameters that the user need to specify according to their problem. So they need to be adjusted to the problem. The advanced parameters are those that although the user might benefit from adjusting there, the default parameters are good enough to run a reasonable answer.•	Basic parameters•	HammingPolyWeight”: 0.7,•	“RevEngWeight”: 0.4,•	“BioProbWeight”: 0.3,•	“HammingModelWeight”: 0.5,•	“PolyScoreWeight”: 0.4•	Advanced parameters•	“GenePoolSize”: 2000,•	“NumCandidates”: 1000,•	“NumParentsToPreserve”: 100,•	“MaxGenerations”: 500,•	“StableGenerationLimit”: 200,•	“MutateProbability”:50