{
"task": {
  "input": {
    "reverseEngineeringInputData": {
      "description": "optional place to put comments - data matrices for wildtype and knockout experiments",
      "fieldCardinality": 5,
      "numberVariables": 4,
      "timeSeriesData": [
          {
          "index": [],
          "matrix": [
              [1,0,0,0],
              [0,1,0,1],
              [1,1,0,0]
            ],
          "name": "wildtype experiment 1"
          },
          {
          "index": [],
          "matrix": [
              [1,1,0,0],
              [0,0,0,1],
              [1,0,0,0]
            ],
          "name": "wildtype experiment 2"
          },
          {
          "index": [1,3],
          "matrix": [
              [0,0,0,0],
              [0,0,0,1],
              [0,1,0,0],
              [0,0,0,1]
            ],
          "name": "double knockout experiment 1"
          },
          {
          "index": [1,3],
          "matrix": [
              [0,1,0,0],
              [0,1,0,1],
              [0,1,0,1],
              [0,0,0,0]
            ],
          "name": "double knockout experiment 2"
          },
          {
          "index": [2],
          "matrix": [
              [1,0,0,0],
              [0,0,0,1],
              [1,0,0,1],
              [0,0,0,0]
            ],
          "name": "knockout experiment 1"
          }
        ]
      }
    },
  "method": {
    "id": "REACT",
    "description": "this is the reverse engineering method that uses an evolutionary algorithm as optimization method",
    "parameters": 
{
"priorReverseEngineeringNetwork": [
              [1,2,2,2],
              [0,1,0,1],
              [1,1,0,0]
            ],

"complexity": [
              [1,2,2,2],
              [0,1,0,1],
              [1,1,0,0]
            ],

"priorBiologicalNetwork": [
              [1,2,2,2],
              [0,1,0,1], 
              [1,1,0,0]
            ],

"updateRules": {
      "x1": [
          {
            "inputVariables": ["x1","x2"],
            "polynomialFunction": "x1*x2",
            "score": 1.0
          }
      ],
      "x2": [
          {
            "inputVariables": ["x1"],
            "polynomialFunction": "x1+1",
            "polynomialProbability": 0.25
          },
          {
            "inputVariables": ["x1","x2"],
            "polynomialFunction": "x1*x2",
            "polynomialProbability": 0.75
          }
      ],
      "x3": [
          {
            "inputVariables": ["x1","x2","x3"],
            "polynomialFunction": "x3^2+x1+x2",
            "polynomialProbability": 1.0
          }
      ]
    },

"EAparams" : {
"basicparams": {
"HammingPolyWeight": 0.7,
"RevEngWeight": 0.4,
"BioProbWeight": 0.3,
"HammingModelWeight": 0.5,
"PolyScoreWeight": 0.4
},

"advancedparams":{ 
"GenePoolSize": 2000,
"NumCandidates": 1000,
"NumParentsToPreserve": 100,
"MaxGenerations": 500,
"StableGenerationLimit": 200,
"MutateProbability":50
}

}

}
    },
  "type": "reverseEngineering"
  }
}
